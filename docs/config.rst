Configuring CumulusCI
=====================



``cumulusci.yml`` Structure
---------------------------
There are five top level sections of the ``cumulusci.yml`` file:

Project
*****************
The project section is largely generated by running ``cci project init`` and has two major sub-categories: ``package``, and ``git``.
The ``package`` sub-section contains information about the projects package, while the ``git`` sub-section contains a link to the projects GitHub repository, and branch prefixes.



Tasks
*****************
This section lists any tasks that are currently being configured by your project.
Configurations here can include things like specifying default values for options or including a new custom task written in Python.



Flows
*****************
This section lists any flows that are currently being configured by your project.
Configuraitons here include things like, adding/removing/replacing steps in a flow, or defining new custom flows.



Sources
*****************
This section lists any GitHub repositories who's custom tasks and flows you would like to make available to CumulusCI.
You can find more on this topic in the `using tasks and flows from a different project`_ section.



Orgs
*****************
This section lists any customizations you've made to the five out-of-the-box org that come with CumulusCI or any net new orgs you've configured for your project.
The following is a an example where the default days for the ``dev`` org has been increased to 15, and there is a new org used for testing multicurrency.

.. code-block:: yaml

    orgs:
        dev:
            days: 15
        multicurrency:
            config_file: orgs/multicurrency.json
            days: 7

Plans   
*****************
This section contains any custom plans you have defined for how to install your project into a customer org.
See more about plans on Metadeploy `here<TODO>`_



Overrides
---------
Overrides are the most common form of configuration that can be done in the ``cumumulusci.yml`` file.
The following examples demonstrate various ways in which you can utilize overrides.



Setting Task Options
********************************
If there is a specific task that you run, and you have an option value that remains static, you can instruct CumulusCI to always use that value when running the task.
If you want everyone in your project who runs the ``robot`` task, to execute the full suite of robot tests for your project, and always use the same output directory for results you can use:

.. code-block:: yaml

    robot:
        options:
            suites: robot/tests
            options:
                outputdir: robot/projectName/results

This assumes that robot tests for your project live under the ``robotframework/tests`` directory.

Add a Custom Task
********************************
Say that you want to take the above example and create a custom task named ``robot_run_all`` to make it more apparent what this task is doing.
You can do this with the following steps:

* Lookup the Python class that is associated with the standard task.

    * You can do this by going to the `internal CumulusCI file <https://github.com/SFDO-Tooling/CumulusCI/blob/master/cumulusci/cumulusci.yml>`_ and looking for the corresponding tasks `class value <https://github.com/SFDO-Tooling/CumulusCI/blob/d038f606d97f50a71ba1d2d6e9462a249b28864e/cumulusci/cumulusci.yml#L398>`_.

Now you can add the following under the ``tasks:`` section of your ``cumulusci.yml`` file.

.. code-block:: yaml

    robot_run_all:
        description: Runs all robot suites for the project
        class_path: cumulusci.tasks.robotframework.Robot
        group: projectName
        suites: robot/tests
        options:
            outputdir: robot/projectName/results

Congratulations! You have created a new custom task in CumulusCI!
Adding a common ``group`` attribute to your custom tasks makes it easy to see the tasks that are specific to your project with ``cci task list``.

This technique is also commonly applied when deploying different portions of `unpackaged metadata <TODO>`_.
If we have some reports that live under ``unpackaged/config/reports`` and our project's source code  is in `Metadata format <>`_  we could include the following in the ``tasks`` seciton of our project's ``cumulusci.yml`` file.

.. code-block::

    deploy_reports:
        description: Deploy reports
        class_path: cumulusci.tasks.salesforce.Deploy
        group: projectName
        options:
            path: unpackaged/config/reports
            namespace_inject: $project_config.project__package__namespacej


If you want to `write a custom task in python <TODO>`_ and make it available to other users in the project you would need to update your ``cumulusci.yml`` file's ``task`` section with the following:

.. code-block:: yaml

    tasks:
        my_new_task:
            description: Description of the task
            class_path: tasks.task_file.MyTaskClass
            group: projectName

The above assumes that your task's class is name ``MyTaskClass`` and exists in the file ``tasks/task_file.py``.




Add a Flow Step
********************************



Remove a Flow Step
********************************



Replace a Flow Step
********************************



Add a Custom Flow
********************************



Override Scopes 
---------------
Overrides can be made at several distinct scopes which affect h
When we reference ``cumulusci.yml`` in our documentation, we are referring to the ``cumulusci.yml`` file located in your project's root directory.
In actuality, CumulusCI merges multiple `YAML <https://yaml.org/>`_ files that allow for CumulusCI to be configured at several distinct levels. 
All of thes files are have the same name- ``cumulusci.yml`` -but live in different locations on the file system.


Global Overrides
*******************
**File Path:** ``~/.cumulusci/cumulusci.yml``

Configuration of this file will override behavior across *all* CumulusCI projects on your machine. 

Project Overrides
*******************
**File Path:** ``/path/to/project/cumulusci.yml``

This ``cumulusci.yml`` file lives in the root directory of your project (typically a github repository too).
Configuration made here applies specifically to this project.
Changes to this file can be commited back to a remote repository so other team members can benefit from these customizations.

Local Project Overrides 
***************************
**File Path:** ``/path/to/project/cumulusci.yml``

Configurations made to this ``cumulusci.yml`` file apply to only the project with the given <project_name>.
If you want to make customizations to a project, but don't need them to be available to other team members, you would make those customizations here.

One Last ``cumulusci.yml``
*****************************
There is one more configuration file that exists; the `internal cumulusci.yml <https://github.com/SFDO-Tooling/CumulusCI/blob/master/cumulusci/cumulusci.yml>`_ file that ships with CumulusCI itself.
This file, contains all of the standard tasks, flows, and default configurations that come out of the box with CumulusCI.


Using Tasks and Flows From a Different Project
----------------------------------------------
The dependency handling discussed above is used in a very specific context,
to install dependency packages or metadata bundles in the ``dependencies`` flow
which is a component of some other flows. It's also possible to use
arbitrary tasks and flows from another project. To do this, the other project
must be named in the ``sources`` section of cumulusci.yml:

.. code-block:: yaml

    sources:
      npsp:
        github: https://github.com/SalesforceFoundation/NPSP

This says that when tasks or flows are referenced using the `npsp` namespace,
CumulusCI should fetch the source from this GitHub repository. By default,
it will fetch the most recent release, or the default branch if there are no releases.
It's also possible to fetch a specific ``tag``:

.. code-block:: yaml

    sources:
      npsp:
        github: https://github.com/SalesforceFoundation/NPSP
        tag: rel/3.163

or a specific ``commit`` or ``branch``.

Now it's possible to run a flow from NPSP:

.. code-block:: console

    $ cci flow run npsp:install_prod

Or a task:

.. code-block:: console

    $ cci task run npsp:robot

Or even to create a new flow which uses a flow from NPSP:

.. code-block:: yaml

    flows:
      install_npsp:
        steps:
          1:
            flow: npsp:install_prod
          2:
            flow: dev_org

This flow will use NPSP's ``install_prod`` flow to install NPSP as a managed package,
and then run this project's own ``dev_org`` flow.